{"ast":null,"code":"var _jsxFileName = \"/home/ashok/Mis-student-Verification-main/src/components/JobDescriptionUploader.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport { Form, Alert } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst JobDescriptionUploader = ({\n  onUpload\n}) => {\n  _s();\n  const [file, setFile] = useState(null);\n  const [error, setError] = useState('');\n  const fileInputRef = useRef(null);\n  const validateFile = file => {\n    // Check file type\n    const allowedExtensions = ['.pdf', '.docx', '.txt'];\n    const fileExt = file.name.substring(file.name.lastIndexOf('.')).toLowerCase();\n    if (!allowedExtensions.includes(fileExt)) {\n      return 'Please upload a PDF, DOCX, or TXT file';\n    }\n\n    // Check file size (10MB limit)\n    if (file.size > 10 * 1024 * 1024) {\n      return 'File size exceeds 10MB limit';\n    }\n    return '';\n  };\n  const handleFileChange = e => {\n    const selectedFile = e.target.files[0];\n    if (!selectedFile) {\n      setFile(null);\n      setError('');\n      onUpload(null);\n      return;\n    }\n    const validationError = validateFile(selectedFile);\n    if (validationError) {\n      setFile(null);\n      setError(validationError);\n      onUpload(null);\n      // Reset file input\n      if (fileInputRef.current) {\n        fileInputRef.current.value = '';\n      }\n      return;\n    }\n    setFile(selectedFile);\n    setError('');\n    onUpload(selectedFile);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n      controlId: \"jobDescriptionUpload\",\n      className: \"mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n        children: \"Upload Job Description File\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        type: \"file\",\n        onChange: handleFileChange,\n        ref: fileInputRef,\n        accept: \".pdf,.docx,.txt\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Text, {\n        className: \"text-muted\",\n        children: \"File should be in PDF, DOCX, or TXT format and less than 10MB in size.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n      variant: \"danger\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }, this), file && /*#__PURE__*/_jsxDEV(Alert, {\n      variant: \"success\",\n      children: [/*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"bi bi-check-circle-fill me-2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this), \"File \\\"\", file.name, \"\\\" (\", (file.size / 1024).toFixed(2), \" KB) uploaded successfully!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(JobDescriptionUploader, \"dnPzz0X2sEfpsX+3ih/wGc44mHQ=\");\n_c = JobDescriptionUploader;\nexport default JobDescriptionUploader;\nvar _c;\n$RefreshReg$(_c, \"JobDescriptionUploader\");","map":{"version":3,"names":["React","useState","useRef","Form","Alert","jsxDEV","_jsxDEV","JobDescriptionUploader","onUpload","_s","file","setFile","error","setError","fileInputRef","validateFile","allowedExtensions","fileExt","name","substring","lastIndexOf","toLowerCase","includes","size","handleFileChange","e","selectedFile","target","files","validationError","current","value","children","Group","controlId","className","Label","fileName","_jsxFileName","lineNumber","columnNumber","Control","type","onChange","ref","accept","Text","variant","toFixed","_c","$RefreshReg$"],"sources":["/home/ashok/Mis-student-Verification-main/src/components/JobDescriptionUploader.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\nimport { Form, Alert } from 'react-bootstrap';\n\nconst JobDescriptionUploader = ({ onUpload }) => {\n  const [file, setFile] = useState(null);\n  const [error, setError] = useState('');\n  const fileInputRef = useRef(null);\n\n  const validateFile = (file) => {\n    // Check file type\n    const allowedExtensions = ['.pdf', '.docx', '.txt'];\n    const fileExt = file.name.substring(file.name.lastIndexOf('.')).toLowerCase();\n    \n    if (!allowedExtensions.includes(fileExt)) {\n      return 'Please upload a PDF, DOCX, or TXT file';\n    }\n    \n    // Check file size (10MB limit)\n    if (file.size > 10 * 1024 * 1024) {\n      return 'File size exceeds 10MB limit';\n    }\n    \n    return '';\n  };\n\n  const handleFileChange = (e) => {\n    const selectedFile = e.target.files[0];\n    \n    if (!selectedFile) {\n      setFile(null);\n      setError('');\n      onUpload(null);\n      return;\n    }\n    \n    const validationError = validateFile(selectedFile);\n    if (validationError) {\n      setFile(null);\n      setError(validationError);\n      onUpload(null);\n      // Reset file input\n      if (fileInputRef.current) {\n        fileInputRef.current.value = '';\n      }\n      return;\n    }\n    \n    setFile(selectedFile);\n    setError('');\n    onUpload(selectedFile);\n  };\n\n  return (\n    <div>\n      <Form.Group controlId=\"jobDescriptionUpload\" className=\"mb-3\">\n        <Form.Label>Upload Job Description File</Form.Label>\n        <Form.Control \n          type=\"file\" \n          onChange={handleFileChange}\n          ref={fileInputRef}\n          accept=\".pdf,.docx,.txt\"\n        />\n        <Form.Text className=\"text-muted\">\n          File should be in PDF, DOCX, or TXT format and less than 10MB in size.\n        </Form.Text>\n      </Form.Group>\n      \n      {error && <Alert variant=\"danger\">{error}</Alert>}\n      \n      {file && (\n        <Alert variant=\"success\">\n          <i className=\"bi bi-check-circle-fill me-2\"></i>\n          File \"{file.name}\" ({(file.size / 1024).toFixed(2)} KB) uploaded successfully!\n        </Alert>\n      )}\n    </div>\n  );\n};\n\nexport default JobDescriptionUploader;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}