const nodemailer = require('nodemailer');
const fs = require('fs');
const path = require('path');
const { logStatus } = require('./fileUtils');

/**
 * Creates a nodemailer transporter using environment variables
 * @returns {Object} - Nodemailer transporter
 */
const createTransporter = () => {
  return nodemailer.createTransport({
    host: process.env.SMTP_HOST || 'smtp.gmail.com',
    port: process.env.SMTP_PORT || 587,
    secure: process.env.SMTP_SECURE === 'true',
    auth: {
      user: process.env.SMTP_USER,
      pass: process.env.SMTP_PASS
    }
  });
};

/**
 * Sends an email with the generated PDF attachment
 * @param {string} to - Recipient email address
 * @param {string} studentName - Student's name
 * @param {string} rollNumber - Student's roll number
 * @param {string} pdfPath - Path to the PDF file to attach
 * @returns {Promise<boolean>} - Promise resolving to success status
 */
const sendEmail = async (to, studentName, rollNumber, pdfPath) => {
  try {
    if (!process.env.SMTP_USER || !process.env.SMTP_PASS) {
      logStatus(rollNumber, 'Warning', 'SMTP credentials not configured. Email not sent.');
      return false;
    }

    const transporter = createTransporter();
    
    const mailOptions = {
      from: `"Student MIS System" <${process.env.SMTP_USER}>`,
      to,
      subject: 'Your Personalized Job Match Report',
      text: `Dear ${studentName},\n\nPlease find attached your personalized job match report generated by our system.\n\nBest regards,\nStudent MIS System Team`,
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h2 style="color: #4a6ee0;">Your Personalized Job Match Report</h2>
          <p>Dear ${studentName},</p>
          <p>Thank you for using our Student MIS Verification System. We have analyzed your profile against the job description and created a personalized report for you.</p>
          <p>Please find the report attached to this email.</p>
          <p>Best regards,<br>Student MIS System Team</p>
        </div>
      `,
      attachments: [
        {
          filename: `${studentName.replace(/\s+/g, '_')}_Job_Match_Report.pdf`,
          path: pdfPath
        }
      ]
    };

    await transporter.sendMail(mailOptions);
    logStatus(rollNumber, 'Success', `Email sent to ${to}`);
    return true;
  } catch (error) {
    logStatus(rollNumber, 'Failure', `Failed to send email: ${error.message}`);
    return false;
  }
};

module.exports = {
  sendEmail
};