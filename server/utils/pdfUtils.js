const PDFDocument = require('pdfkit');
const fs = require('fs');
const path = require('path');

/**
 * Generates a PDF report for a student based on LLM response
 * @param {Object} studentData - Student profile data
 * @param {string} llmResponse - Response from LLM
 * @param {string} outputDir - Directory to save the PDF
 * @returns {Promise<string>} - Path to the generated PDF
 */
const generatePDF = (studentData, llmResponse, outputDir) => {
  return new Promise((resolve, reject) => {
    try {
      const studentName = studentData.Name || 'Unknown Student';
      const studentEmail = studentData.Email || `unknown_${Date.now()}@example.com`;
      const fileName = `${studentEmail.replace(/[^a-zA-Z0-9._-]/g, '_')}_Job_Match_Report.pdf`;
      const outputPath = path.join(outputDir, fileName);
      
      // Create a PDF document
      const doc = new PDFDocument({
        margins: { top: 50, bottom: 50, left: 50, right: 50 },
        size: 'A4'
      });
      
      // Pipe the PDF to a file
      const stream = fs.createWriteStream(outputPath);
      doc.pipe(stream);
      
      // Add header
      doc.fontSize(24)
         .fillColor('#4a6ee0')
         .text('Personalized Job Match Report', { align: 'center' })
         .moveDown(1);
      
      // Add student information
      doc.fontSize(16)
         .fillColor('#333')
         .text('Student Profile', { underline: true })
         .moveDown(0.5);
      
      doc.fontSize(12)
         .text(`Name: ${studentData.Name || 'N/A'}`)
         .text(`Email: ${studentData.Email || 'N/A'}`)
         .text(`University: ${studentData.University || 'N/A'}`)
         .text(`Degree: ${studentData.Degree || 'N/A'} in ${studentData.Major || 'N/A'}`)
         .text(`Graduation Year: ${studentData.Graduation_Year || 'N/A'}`)
         .moveDown(1);
      
      // Add skills section
      doc.fontSize(16)
         .text('Skills', { underline: true })
         .moveDown(0.5);
      
      // Extract skills from student data
      const skills = [];
      for (let i = 1; i <= 5; i++) {
        const skillKey = `Skill${i}`;
        const skillLevelKey = `Skill${i}_Level`;
        if (studentData[skillKey]) {
          skills.push(`${studentData[skillKey]} (${studentData[skillLevelKey] || 'N/A'})`);
        }
      }
      
      if (skills.length > 0) {
        doc.fontSize(12).list(skills).moveDown(1);
      } else {
        doc.fontSize(12).text('No skills listed').moveDown(1);
      }
      
      // Add LLM analysis
      doc.fontSize(16)
         .text('Job Match Analysis', { underline: true })
         .moveDown(0.5);
      
      doc.fontSize(12)
         .text(llmResponse, { align: 'justify' })
         .moveDown(1);
      
      // Add footer
      const bottomPosition = doc.page.height - 50;
      doc.fontSize(10)
         .fillColor('#666')
         .text(
           `Generated by Student MIS Verification System | ${new Date().toISOString().split('T')[0]}`,
           50,
           bottomPosition,
           { align: 'center' }
         );
      
      // Finalize the PDF
      doc.end();
      
      // Return the path when the stream is closed
      stream.on('finish', () => {
        resolve(outputPath);
      });
      
      stream.on('error', (err) => {
        reject(new Error(`Error generating PDF: ${err.message}`));
      });
    } catch (error) {
      reject(new Error(`Error generating PDF: ${error.message}`));
    }
  });
};

module.exports = {
  generatePDF
};